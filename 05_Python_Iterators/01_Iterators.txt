

# An iterator is an object that contains a countable number of values.

# An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.

# An iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().

#* __iter__() Method
# The __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.

#* __next__() Method
# The __next__() method also allows you to do operations, and must return the next item in the sequence.

#? Iterator vs Iterable

# Lists, tuples, dictionaries, and sets are all iterable objects. 
# They are iterable containers which you can get an iterator from.

# All these objects have a iter() method which is used to get an iterator:
